% Clear stuff
clear all;

%-------------------------------------------------------------------------%
%%                             Read Data                                 %%
%-------------------------------------------------------------------------%
%-------------------%
%     Read Data     %
%-------------------%
% mat_file = '../data_mat/PTC_scan.mat';
% mat_file = '../data_mat/PTC_scan_G.mat';
mat_file = '../data_mat/PTC_scan_I.mat';
% mat_file = '../data_mat/PTC_scan_I_auto_big.mat';
% Load data from .mat
load(mat_file);

%--------------------------------%
%     Coordinates for 'Hole'     %
%--------------------------------%
% % G-direction
% intersection.theta_old = 0.3176;
% intersection.A_perturb = 0.5576;

% I-Direction
intersection.theta_old = 0.4981;
intersection.A_perturb = 4.0371;

%-------------------------------------------------------------------------%
%%                             Plot Data                                 %%
%-------------------------------------------------------------------------%
% Plotting colours
colours = colororder();

fig = figure(5); clf;
fig.Name = 'PTC Scans';
fig.Units = 'inches'; fig.Position = [0, 0, 16, 8]; fig.PaperSize = [16, 8];

tiles = tiledlayout(1, 1, Padding='compact', TileSpacing='compact');
ax = nexttile;
ax.FontSize = 11;

hold(ax, 'on');

%-------------------------------------------------%
%     Plot: Stable Manifold Intersection Pole     %
%-------------------------------------------------%
plot3(ax, [intersection.theta_old, intersection.theta_old], ...
     [intersection.A_perturb, intersection.A_perturb], ...
     [-5, 5], ...
     Color='k', LineWidth=5.0, LineStyle='-');

%-----------------------%
%     Plot: 3D Plot     %
%-----------------------%
% % Plot: theta_old < 1
% data_plot = data_before_hole;
% for i = 1 : length(data_plot.A_perturb)
%   % Grab data
%   theta_old_plot = data_plot.theta_old{i};
%   theta_new_plot = data_plot.theta_new{i};
%   A_perturb_plot = data_plot.A_perturb(i) * ones(length(theta_old_plot));
% 
%   % Plot
%   plot3(ax, theta_old_plot, A_perturb_plot, theta_new_plot, ...
%         Color=colours(1, :), LineStyle='-');
% end

% data_plot = data_after_hole;
% for i = 1 : length(data_plot.A_perturb)
%   % Grab data
%   theta_old_plot = data_plot.theta_old{i};
%   theta_new_plot = data_plot.theta_new{i};
%   A_perturb_plot = data_plot.A_perturb(i) * ones(length(theta_old_plot));
% 
%   % Plot
%   plot3(ax, theta_old_plot, A_perturb_plot, theta_new_plot, ...
%         Color=colours(1, :), LineStyle='-');
% end

% data_plot = data_hole_lt1;
% for i = 1 : length(data_plot.A_perturb)
%   % Grab data
%   theta_old_plot = data_plot.theta_old{i};
%   theta_new_plot = data_plot.theta_new{i};
%   A_perturb_plot = data_plot.A_perturb(i) * ones(length(theta_old_plot));
% 
%   % Plot
%   plot3(ax, theta_old_plot, A_perturb_plot, theta_new_plot, ...
%         Color=colours(1, :), LineStyle='-');
% end

% data_plot = data_hole_gt1;
% for i = 1 : length(data_plot.A_perturb)
%   % Grab data
%   theta_old_plot = data_plot.theta_old{i};
%   theta_new_plot = data_plot.theta_new{i};
%   A_perturb_plot = data_plot.A_perturb(i) * ones(length(theta_old_plot));
% 
%   % Plot
%   plot3(ax, theta_old_plot, A_perturb_plot, theta_new_plot, ...
%         Color=colours(1, :), LineStyle='-');
% end

%-----------------------%
%     Plot: Surface     %
%-----------------------%
% Surface: Hole (theta_old < 1)
[X, Y, Z] = pad_data(data_hole_lt1, 0, 'lt1');
Z(end, end) = Z(end, end-1);
surf(ax, X, Y, Z, EdgeColor='interp', FaceColor='interp', MeshStyle='row');

% % Surface: Hole (theta_old > 1)
% [X, Y, Z] = pad_data(data_hole_gt1, 0, 'gt1');
% surf(ax, X, Y, Z, MeshStyle='column');
% 
% % Surface: Before hole
% [X, Y, Z] = pad_data(data_before_hole, 0, 'none');
% surf(ax, X, Y, Z, MeshStyle='column');
% 
% % Surface: After hole
% [X, Y, Z] = pad_data(data_after_hole, 0, 'none');
% surf(ax, X, Y, Z, MeshStyle='column');

%-----------------------------------------%
%     Plot: Surface (One Level Lower)     %
%-----------------------------------------%
% % Surface: Hole (theta_old < 1)
% [X, Y, Z] = pad_data(data_hole_lt1, 1, 'lt1');
% Z(end, end) = Z(end, end-1);
% surf(ax, X, Y, Z, EdgeColor='interp', FaceColor='interp', MeshStyle='row');
% 
% % Surface: Hole (theta_old > 1)
% [X, Y, Z] = pad_data(data_hole_gt1, 1, 'gt1');
% surf(ax, X, Y, Z, MeshStyle='column');
% 
% % Surface: Before hole
% [X, Y, Z] = pad_data(data_before_hole, 1, 'none');
% surf(ax, X, Y, Z, MeshStyle='column');
% 
% % Surface: After hole
% [X, Y, Z] = pad_data(data_after_hole, 1, 'none');
% surf(ax, X, Y, Z, MeshStyle='column');

%---------------------------%
%     Surface: Settings     %
%---------------------------%
% Shading of surface
shading(ax, 'interp');

% Colorbar
cbar = colorbar();

hold(ax, 'off');

%---------------------%
%     Axis Limits     %
%---------------------%
ax.XAxis.Limits = [0.0, 1.0];
ax.YAxis.Limits = [0.0, max(A_perturb)];
ax.ZAxis.Limits = [0.4, 2.5];

%---------------------%
%     Axis Labels     %
%---------------------%
ax.XAxis.Label.String = '$\theta_{\mathrm{old}}$';
ax.YAxis.Label.String = '$A_{\mathrm{perturb}}$';
ax.ZAxis.Label.String = '$\theta_{\mathrm{new}}$';

%--------------------%
%     Axis Title     %
%--------------------%
d_vec = [cos(theta_perturb); 0.0; sin(theta_perturb)];
title_str = sprintf('Phase Transition Curve (PTC) with $\\vec{d} = (%.0f, %.0f, %.0f)$', d_vec(1), d_vec(2), d_vec(3));
ax.Title.String = title_str;

%----------------------%
%     Figure Stuff     %
%----------------------%
box(ax, 'on');
grid(ax, 'on');
view(-45, 15);

%---------------------%
%     Save Figure     %
%---------------------%
% if save_figure == true
%   % Filename
%   exportgraphics(fig, filename_out, ContentType='vector');
% end

%-------------------------------------------------------------------------%
%%                           Data Functions                              %%
%-------------------------------------------------------------------------%
function [theta_old, A_perturb, theta_new] = pad_data(data_in, theta_new_modifier, theta_old_lt1_gt1)
  % [theta_old, theta_new, A_perturb] = pad_data(theta_old_in, theta_new_in, A_perturb_in)
  %
  % Read the data and pad it to the max length data array
  
  % Read data
  theta_old_read = data_in.theta_old;
  theta_new_read = data_in.theta_new;
  A_perturb_read = data_in.A_perturb;

  % Output data
  theta_old = [];
  theta_new = [];
  A_perturb = [];

  % Get max length
  lengths = [];
  max_theta_old = [];
  min_theta_old = [];
  for i = 1 : length(theta_old_read)
    % Read temp data
    theta_old_temp = theta_old_read{i};

    max_theta_old = [max_theta_old, max(theta_old_temp)];
    min_theta_old = [min_theta_old, min(theta_old_temp)];

    % Get max length
    lengths = [lengths, length(theta_old_temp)];
  end
  [~, max_idx] = max(lengths);

  % Get max length theta_old
  theta_old_max = theta_old_read{max_idx};

  if strcmp(theta_old_lt1_gt1, 'lt1')
    % Find theta_old_read with max theta_old value, interpolate so is the
    % same length as theta_old_max
    [TO_min_val, max_idx] = min(min_theta_old);

    % Interpolate data
    theta_old_max = theta_old_read{max_idx};
  end

  if strcmp(theta_old_lt1_gt1, 'gt1')
    % Find theta_old_read with max theta_old value, interpolate so is the
    % same length as theta_old_max
    [TO_max_val, max_idx] = max(max_theta_old);

    % Interpolate data
    theta_old_max = theta_old_read{max_idx};
  end

  % Cycle through all data arrays and interpolate theta_new
  for i = 1 : length(theta_new_read)

    % Read temp data
    theta_old_temp = theta_old_read{i};
    theta_new_temp = theta_new_read{i};
    A_perturb_temp = A_perturb_read(i);

    % Get unique indices
    [~, unique_idx] = unique(theta_old_temp);
    theta_old_temp = theta_old_temp(unique_idx);
    theta_new_temp = theta_new_temp(unique_idx);

    % Check if i != max_idx
    if i ~= max_idx
      % Interpolate data
      theta_new_interp = interp1(theta_old_temp, theta_new_temp, theta_old_max);
    else
      % Just append that array
      theta_new_interp = theta_new_read{i};
    end
    
    theta_old_interp = theta_old_max;

    % If doing data theta_old < 1, set all theta_old values < the min value
    % of that data set to the min value
    if strcmp(theta_old_lt1_gt1, 'lt1')
      % Find min value
      [min_val, min_idx] = min(theta_old_read{i});

      % Find all values less than this
      lt1_idx = theta_old_interp < min_val;

      % Set to the value
      theta_old_interp(lt1_idx) = min_val;

      % Set all NaN values to the first theta_new value
      theta_new_NaN = theta_new_read{i}(min_idx);
      % Find NaNs
      theta_new_interp(isnan(theta_new_interp)) = theta_new_NaN;
    end

    if strcmp(theta_old_lt1_gt1, 'gt1')
      % Find min value
      [max_val, max_idx] = max(theta_old_read{i});

      % Find all values less than this
      gt1_idx = theta_old_interp > max_val;

      % Set to the value
      theta_old_interp(gt1_idx) = max_val;

      % Set all NaN values to the first theta_new value
      theta_new_NaN = theta_new_read{i}(max_idx);
      % Find NaNs
      theta_new_interp(isnan(theta_new_interp)) = theta_new_NaN;
    end
    
    % % Append the first value
    % theta_new_interp = [theta_new_1, theta_new_interp];
    % theta_old_interp = [theta_old_1, theta_old_max];

    % Append other stuff
    theta_new = [theta_new; theta_new_interp];
    theta_old = [theta_old; theta_old_interp];
    A_perturb = [A_perturb; A_perturb_read(i) * ones(1, length(theta_new_interp))];
  end

  % Add modifier
  theta_new = theta_new + theta_new_modifier;

end